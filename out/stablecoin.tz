{ parameter
    (or (or (or (pair %balance_of
                   (list %requests (pair (address %owner) (nat %token_id)))
                   (contract %callback
                      (list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)))))
                (pair %is_operator
                   (pair %operator
                      (address %owner)
                      (pair (address %operator) (or %tokens (unit %All_tokens) (set %Some_tokens nat))))
                   (contract %callback
                      (pair (pair %operator
                               (address %owner)
                               (pair (address %operator) (or %tokens (unit %All_tokens) (set %Some_tokens nat))))
                            (bool %is_operator)))))
            (or (contract %permissions_descriptor
                   (pair (or %self (unit %self_transfer_denied) (unit %self_transfer_permitted))
                         (pair (or %operator
                                  (unit %operator_transfer_denied)
                                  (unit %operator_transfer_permitted))
                               (pair (or %receiver
                                        (unit %Owner_no_op)
                                        (or (unit %Optional_owner_hook) (unit %Required_owner_hook)))
                                     (pair (or %sender
                                              (unit %Owner_no_op)
                                              (or (unit %Optional_owner_hook) (unit %Required_owner_hook)))
                                           (option %custom (pair (string %tag) (option %config_api address))))))))
                (pair %token_metadata
                   (list %token_ids nat)
                   (contract %callback
                      (list (pair (nat %token_id)
                                  (pair (string %symbol)
                                        (pair (string %name) (pair (nat %decimals) (map %extras string string))))))))))
        (or (or (pair %total_supply
                   (list %token_ids nat)
                   (contract %callback (list (pair (nat %token_id) (nat %total_supply)))))
                (list %transfer
                   (pair (address %from_) (pair (address %to_) (pair (nat %token_id) (nat %amount))))))
            (list %update_operators
               (or (pair %add_operator
                      (address %owner)
                      (pair (address %operator) (or %tokens (unit %All_tokens) (set %Some_tokens nat))))
                   (pair %remove_operator
                      (address %owner)
                      (pair (address %operator) (or %tokens (unit %All_tokens) (set %Some_tokens nat)))))))) ;
  storage
    (pair (pair (pair (bool %fields) (big_map %ledger address nat))
                (pair (big_map %operators (pair address address) unit)
                      (pair %permissions
                         (pair (pair (option %custom (pair (string %tag) (option %config_api address)))
                                     (or %operator
                                        (unit %operator_transfer_denied)
                                        (unit %operator_transfer_permitted)))
                               (pair (or %receiver
                                        (unit %Owner_no_op)
                                        (or (unit %Optional_owner_hook) (unit %Required_owner_hook)))
                                     (or %self (unit %self_transfer_denied) (unit %self_transfer_permitted))))
                         (or %sender
                            (unit %Owner_no_op)
                            (or (unit %Optional_owner_hook) (unit %Required_owner_hook))))))
          (pair (pair %token_metadata
                   (pair (pair (nat %decimals) (map %extras string string))
                         (pair (string %name) (string %symbol)))
                   (nat %token_id))
                (nat %total_supply))) ;
  code { PUSH int 0 ;
         ABS ;
         DUP ;
         LAMBDA
           (pair (address %owner)
                 (pair (address %operator) (or %tokens (unit %All_tokens) (set %Some_tokens nat))))
           unit
           { SENDER ;
             DIG 1 ;
             DUP ;
             DUG 2 ;
             CAR ;
             COMPARE ;
             EQ ;
             IF { UNIT }
                { PUSH string "valdiate_oeprator_param: Sender is not token owner" ;
                  FAILWITH } ;
             DIP { DROP } } ;
         SWAP ;
         LAMBDA
           (pair nat (pair string nat))
           unit
           { DUP ;
             CAR ;
             SWAP ;
             CDR ;
             DIG 1 ;
             DUP ;
             DUG 2 ;
             DIG 1 ;
             DUP ;
             DUG 2 ;
             CDR ;
             COMPARE ;
             NEQ ;
             IF { PUSH string ": Call does not support multiple token types" ;
                  DIG 1 ;
                  DUP ;
                  DUG 2 ;
                  CAR ;
                  CONCAT ;
                  FAILWITH }
                { UNIT } ;
             DIP { DROP 2 } } ;
         SWAP ;
         APPLY ;
         DUP ;
         LAMBDA
           (pair (lambda (pair string nat) unit) (pair string (list nat)))
           unit
           { DUP ;
             CAR ;
             SWAP ;
             CDR ;
             DUP ;
             CDR ;
             MAP { DUP ;
                   DIG 2 ;
                   DUP ;
                   DUG 3 ;
                   CAR ;
                   PAIR ;
                   DIG 3 ;
                   DUP ;
                   DUG 4 ;
                   SWAP ;
                   EXEC ;
                   DIP { DROP } } ;
             DROP 3 ;
             UNIT } ;
         SWAP ;
         APPLY ;
         DIG 4 ;
         DUP ;
         DUG 5 ;
         CDR ;
         DIG 5 ;
         DUP ;
         DUG 6 ;
         CAR ;
         IF_LEFT
           { DUP ;
             IF_LEFT
               { DUP ;
                 IF_LEFT
                   { DIG 3 ;
                     DUP ;
                     DUG 4 ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     PAIR ;
                     DUP ;
                     CAR ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     CDR ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     CAR ;
                     MAP { DUP ;
                           CDR ;
                           PUSH string "balance_of" ;
                           PAIR ;
                           DIG 10 ;
                           DUP ;
                           DUG 11 ;
                           SWAP ;
                           EXEC ;
                           PUSH int 0 ;
                           ABS ;
                           DIG 3 ;
                           DUP ;
                           DUG 4 ;
                           CAR ;
                           CAR ;
                           CDR ;
                           DIG 3 ;
                           DUP ;
                           DUG 4 ;
                           CAR ;
                           GET ;
                           IF_NONE
                             { DUP }
                             { DIG 1 ; DUP ; DUG 2 ; DIG 1 ; DUP ; DUG 2 ; DIP { DROP 2 } } ;
                           DIG 3 ;
                           DUP ;
                           DUG 4 ;
                           PAIR ;
                           DIP { DROP 3 } } ;
                     DIG 2 ;
                     DUP ;
                     DUG 3 ;
                     CDR ;
                     PUSH mutez 0 ;
                     DIG 2 ;
                     DUP ;
                     DUG 3 ;
                     TRANSFER_TOKENS ;
                     NIL operation ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     CONS ;
                     DIG 3 ;
                     DUP ;
                     DUG 4 ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     PAIR ;
                     DIP { DROP 7 } }
                   { DIG 3 ;
                     DUP ;
                     DUG 4 ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     PAIR ;
                     DUP ;
                     CDR ;
                     DUP ;
                     CAR ;
                     CDR ;
                     CDR ;
                     CAR ;
                     CAR ;
                     CDR ;
                     IF_LEFT
                       { PUSH string "is_operator_action: Operator transfer is prohibited" ;
                         FAILWITH }
                       { DROP ; PUSH unit Unit } ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     NIL operation ;
                     DIG 3 ;
                     DUP ;
                     DUG 4 ;
                     CAR ;
                     CDR ;
                     CAR ;
                     DIG 5 ;
                     DUP ;
                     DUG 6 ;
                     CAR ;
                     PAIR ;
                     DUP ;
                     CAR ;
                     DUP ;
                     CDR ;
                     PUSH mutez 0 ;
                     DIG 3 ;
                     DUP ;
                     DUG 4 ;
                     CDR ;
                     DIG 3 ;
                     DUP ;
                     DUG 4 ;
                     CAR ;
                     PAIR ;
                     DUP ;
                     CAR ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     CDR ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     CDR ;
                     CAR ;
                     DIG 2 ;
                     DUP ;
                     DUG 3 ;
                     CAR ;
                     PAIR ;
                     GET ;
                     IF_NONE { PUSH bool False } { DROP ; PUSH bool True } ;
                     DIP { DROP 2 } ;
                     DIG 3 ;
                     DUP ;
                     DUG 4 ;
                     CAR ;
                     PAIR ;
                     TRANSFER_TOKENS ;
                     DIP { DROP 2 } ;
                     CONS ;
                     PAIR ;
                     DIP { DROP 4 } } ;
                 DIP { DROP } }
               { DUP ;
                 IF_LEFT
                   { DIG 3 ;
                     DUP ;
                     DUG 4 ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     PAIR ;
                     DUP ;
                     CDR ;
                     DUP ;
                     CAR ;
                     CDR ;
                     CDR ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     NIL operation ;
                     DIG 4 ;
                     DUP ;
                     DUG 5 ;
                     CAR ;
                     PUSH mutez 0 ;
                     DIG 4 ;
                     DUP ;
                     DUG 5 ;
                     CAR ;
                     CAR ;
                     CAR ;
                     DIG 5 ;
                     DUP ;
                     DUG 6 ;
                     CDR ;
                     PAIR ;
                     DIG 5 ;
                     DUP ;
                     DUG 6 ;
                     CAR ;
                     CDR ;
                     CAR ;
                     PAIR ;
                     DIG 5 ;
                     DUP ;
                     DUG 6 ;
                     CAR ;
                     CAR ;
                     CDR ;
                     PAIR ;
                     DIG 5 ;
                     DUP ;
                     DUG 6 ;
                     CAR ;
                     CDR ;
                     CDR ;
                     PAIR ;
                     TRANSFER_TOKENS ;
                     CONS ;
                     PAIR ;
                     DIP { DROP 4 } }
                   { DIG 3 ;
                     DUP ;
                     DUG 4 ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     PAIR ;
                     DUP ;
                     CAR ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     CDR ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     CAR ;
                     PUSH string "token_metadata" ;
                     PAIR ;
                     DIG 8 ;
                     DUP ;
                     DUG 9 ;
                     SWAP ;
                     EXEC ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     CDR ;
                     CAR ;
                     DIG 2 ;
                     DUP ;
                     DUG 3 ;
                     NIL operation ;
                     DIG 5 ;
                     DUP ;
                     DUG 6 ;
                     CDR ;
                     PUSH mutez 0 ;
                     NIL (pair nat (pair string (pair string (pair nat (map string string))))) ;
                     DIG 5 ;
                     DUP ;
                     DUG 6 ;
                     CAR ;
                     CAR ;
                     CDR ;
                     DIG 6 ;
                     DUP ;
                     DUG 7 ;
                     CAR ;
                     CAR ;
                     CAR ;
                     PAIR ;
                     DIG 6 ;
                     DUP ;
                     DUG 7 ;
                     CAR ;
                     CDR ;
                     CAR ;
                     PAIR ;
                     DIG 6 ;
                     DUP ;
                     DUG 7 ;
                     CAR ;
                     CDR ;
                     CDR ;
                     PAIR ;
                     DIG 6 ;
                     DUP ;
                     DUG 7 ;
                     CDR ;
                     PAIR ;
                     CONS ;
                     TRANSFER_TOKENS ;
                     CONS ;
                     PAIR ;
                     DIP { DROP 6 } } ;
                 DIP { DROP } } ;
             DIP { DROP } }
           { DUP ;
             IF_LEFT
               { DUP ;
                 IF_LEFT
                   { DIG 3 ;
                     DUP ;
                     DUG 4 ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     PAIR ;
                     DUP ;
                     CAR ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     CDR ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     CAR ;
                     PUSH string "total_supply" ;
                     PAIR ;
                     DIG 8 ;
                     DUP ;
                     DUG 9 ;
                     SWAP ;
                     EXEC ;
                     DIG 2 ;
                     DUP ;
                     DUG 3 ;
                     CDR ;
                     PUSH mutez 0 ;
                     NIL (pair (nat %token_id) (nat %total_supply)) ;
                     DIG 4 ;
                     DUP ;
                     DUG 5 ;
                     CDR ;
                     CDR ;
                     DIG 15 ;
                     DUP ;
                     DUG 16 ;
                     PAIR ;
                     CONS ;
                     TRANSFER_TOKENS ;
                     NIL operation ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     CONS ;
                     DIG 3 ;
                     DUP ;
                     DUG 4 ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     PAIR ;
                     DIP { DROP 7 } }
                   { DIG 3 ;
                     DUP ;
                     DUG 4 ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     PAIR ;
                     DUP ;
                     CDR ;
                     DUP ;
                     CAR ;
                     CDR ;
                     CDR ;
                     CAR ;
                     CAR ;
                     CDR ;
                     IF_LEFT
                       { PUSH string "denied" ; FAILWITH }
                       { PUSH string "permitted" ; FAILWITH } } ;
                 DIP { DROP } }
               { DIG 2 ;
                 DUP ;
                 DUG 3 ;
                 DIG 1 ;
                 DUP ;
                 DUG 2 ;
                 PAIR ;
                 DUP ;
                 CDR ;
                 NIL operation ;
                 DIG 1 ;
                 DUP ;
                 DUG 2 ;
                 CAR ;
                 CDR ;
                 CAR ;
                 DIG 3 ;
                 DUP ;
                 DUG 4 ;
                 CAR ;
                 PAIR ;
                 DUP ;
                 CDR ;
                 DIG 1 ;
                 DUP ;
                 DUG 2 ;
                 CAR ;
                 ITER { SWAP ;
                        PAIR ;
                        DUP ;
                        CAR ;
                        DIG 1 ;
                        DUP ;
                        DUG 2 ;
                        CDR ;
                        IF_LEFT
                          { DIG 1 ;
                            DUP ;
                            DUG 2 ;
                            DIG 1 ;
                            DUP ;
                            DUG 2 ;
                            PAIR ;
                            DUP ;
                            CAR ;
                            DUP ;
                            DIG 15 ;
                            DUP ;
                            DUG 16 ;
                            SWAP ;
                            EXEC ;
                            DIG 2 ;
                            DUP ;
                            DUG 3 ;
                            CDR ;
                            UNIT ;
                            DIG 3 ;
                            DUP ;
                            DUG 4 ;
                            CDR ;
                            CAR ;
                            DIG 4 ;
                            DUP ;
                            DUG 5 ;
                            CAR ;
                            PAIR ;
                            SWAP ;
                            SOME ;
                            SWAP ;
                            UPDATE ;
                            DIP { DROP 4 } }
                          { DIG 1 ;
                            DUP ;
                            DUG 2 ;
                            DIG 1 ;
                            DUP ;
                            DUG 2 ;
                            PAIR ;
                            DUP ;
                            CAR ;
                            DUP ;
                            DIG 15 ;
                            DUP ;
                            DUG 16 ;
                            SWAP ;
                            EXEC ;
                            DIG 2 ;
                            DUP ;
                            DUG 3 ;
                            CDR ;
                            DIG 2 ;
                            DUP ;
                            DUG 3 ;
                            CDR ;
                            CAR ;
                            DIG 3 ;
                            DUP ;
                            DUG 4 ;
                            CAR ;
                            PAIR ;
                            NONE unit ;
                            SWAP ;
                            UPDATE ;
                            DIP { DROP 4 } } ;
                        DIP { DROP 2 } } ;
                 DIP { DROP } ;
                 DIG 2 ;
                 DUP ;
                 DUG 3 ;
                 DIG 1 ;
                 DUP ;
                 DUG 2 ;
                 DIP { DUP ; CDR ; SWAP ; CAR ; DUP ; CAR ; SWAP ; CDR ; CDR } ;
                 PAIR ;
                 SWAP ;
                 PAIR ;
                 PAIR ;
                 DIG 2 ;
                 DUP ;
                 DUG 3 ;
                 PAIR ;
                 DIP { DROP 5 } } ;
             DIP { DROP } } ;
         DIP { DROP 6 } } }

